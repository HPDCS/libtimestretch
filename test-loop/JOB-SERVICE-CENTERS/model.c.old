#include <stdio.h>
#include "events.h"

struct _state state[NUM_CENTERS];

#define INITIAL_JOBS 1
#define INCREMENT 1.0

int ProcessEvent(msg_type msg){

	int i;
	msg_type new_msg;
	time_type now;
	int target_center;

	now = msg.timestamp;
	target_center = msg.receiver;
	state[target_center].current_simulation_time = now;

	switch(msg.type){
	
		case INIT:

			state[target_center].current_simulation_time =  0.0;
			state[target_center].queued_jobs =  0;
			state[target_center].served_jobs =  0;
			state[target_center].busy =  0;
			state[target_center].total_service_time =  0.0;

			for(i=0;i<INITIAL_JOBS;i++){
				new_msg.receiver = target_center;
				new_msg.sender = target_center;
				new_msg.type = JOB_ARRIVAL;
				new_msg.send_time = msg.timestamp;
				new_msg.timestamp = now + (i+1)*0.01*INCREMENT; 
				Schedule(new_msg);
			}
		break;


		case JOB_ARRIVAL:

			if(state[target_center].queued_jobs == 0) {
				state[target_center].busy = 1;
				new_msg.receiver = target_center;
				new_msg.sender = target_center;
				new_msg.type = JOB_DEPARTURE;
				new_msg.send_time = now;
				new_msg.timestamp = now + INCREMENT; 
				Schedule(new_msg);
				
			};	
			state[target_center].queued_jobs++;

			printf("ARRIVAL ON center %d - time %e - served jobs %d - queued jobs %d server busy\n",
						target_center,
						state[target_center].current_simulation_time,
						state[target_center].served_jobs,
						state[target_center].queued_jobs,
						state[target_center].busy
				);
/*
			if(state[target_center].queued_jobs == 1) {
				new_msg.receiver = target_center;
				new_msg.sender = target_center;
				new_msg.type = JOB_DEPARTURE;
				new_msg.send_time = now;
				new_msg.timestamp = now + INCREMENT; 
				Schedule(new_msg);
				
			};	
*/

		break;


		case JOB_DEPARTURE:
			if((++state[target_center].served_jobs) % 100 == 0 ){
				printf("center %d - time %e - served jobs %d - queued jobs %d\n",
						target_center,
						state[target_center].current_simulation_time,
						state[target_center].served_jobs,
						state[target_center].queued_jobs
				);
			};


			state[target_center].queued_jobs--;
			state[target_center].busy = 0 ;
			if((state[target_center].queued_jobs)>0) {
				new_msg.receiver = target_center;
				new_msg.sender = target_center;
				new_msg.type = JOB_DEPARTURE;
				new_msg.send_time = now;
				new_msg.timestamp = now + INCREMENT; 
				state[target_center].busy = 1 ;
				Schedule(new_msg);
			}

			printf("DEPARTURE FROM center %d - time %e - served jobs %d - queued jobs %d server busy\n",
						target_center,
						state[target_center].current_simulation_time,
						state[target_center].served_jobs,
						state[target_center].queued_jobs,
						state[target_center].busy
				);

			new_msg.receiver = target_center;
			new_msg.sender = target_center;
			new_msg.type = JOB_ARRIVAL;
			new_msg.send_time = now;
			new_msg.timestamp = now + 0.01*INCREMENT; 
			Schedule(new_msg);

		break;



	}



}
